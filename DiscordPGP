// ==UserScript==
// @name         Discord-Style PGP UI Full (Download/Upload Save/Load)
// @namespace    http://tampermonkey.net/
// @version      1.3
// @description  Discord style PGP UI with generate keys, friends, encrypt, decrypt, copy, edit, delete contacts for discord.com with save profile as download and load profile from uploaded JSON file
// @match        *://discord.com/*
// @grant        none
// ==/UserScript==

(function () {
  'use strict';

  const UI_ID = 'pgp-ui-discord-style';
  const TOGGLE_ID = 'pgp-toggle-discord-style';

  let myPrivateKey = null;
  let myPublicKey = null;
  let myName = '';
  let friends = {};

  // --- Utility for base64 conversions ---
  function arrayBufferToBase64(buffer) {
    let binary = '';
    const bytes = new Uint8Array(buffer);
    for (let i = 0; i < bytes.byteLength; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return btoa(binary);
  }

  function base64ToArrayBuffer(base64) {
    const binary_string = atob(base64);
    const len = binary_string.length;
    const bytes = new Uint8Array(len);
    for (let i = 0; i < len; i++) {
      bytes[i] = binary_string.charCodeAt(i);
    }
    return bytes.buffer;
  }

  // --- Crypto helpers ---
  async function generateKeyPair() {
    return window.crypto.subtle.generateKey(
      {
        name: "RSA-OAEP",
        modulusLength: 2048,
        publicExponent: new Uint8Array([1, 0, 1]),
        hash: "SHA-256",
      },
      true,
      ["encrypt", "decrypt"]
    );
  }

  async function exportPublicKey(key) {
    const exported = await window.crypto.subtle.exportKey("spki", key);
    return arrayBufferToBase64(exported);
  }

  async function exportPrivateKey(key) {
    const exported = await window.crypto.subtle.exportKey("pkcs8", key);
    return arrayBufferToBase64(exported);
  }

  async function importPublicKey(keyStr) {
    const bin = base64ToArrayBuffer(keyStr);
    return crypto.subtle.importKey(
      "spki",
      bin,
      { name: "RSA-OAEP", hash: "SHA-256" },
      true,
      ["encrypt"]
    );
  }

  async function importPrivateKey(keyStr) {
    const bin = base64ToArrayBuffer(keyStr);
    return crypto.subtle.importKey(
      "pkcs8",
      bin,
      { name: "RSA-OAEP", hash: "SHA-256" },
      true,
      ["decrypt"]
    );
  }

  async function encryptMsg(pubKey, msg, sender) {
    const enc = new TextEncoder().encode(`${sender}: ${msg}`);
    const buf = await crypto.subtle.encrypt({ name: "RSA-OAEP" }, pubKey, enc);
    return arrayBufferToBase64(buf);
  }

  async function decryptMsg(privKey, cipher) {
    const bin = base64ToArrayBuffer(cipher);
    const buf = await crypto.subtle.decrypt({ name: "RSA-OAEP" }, privKey, bin);
    return new TextDecoder().decode(buf);
  }

  // --- Save/load profile ---

  async function saveProfileDownload() {
    if (!myPrivateKey || !myPublicKey) return toast("No keys to save.");
    try {
      const priv = await exportPrivateKey(myPrivateKey);
      const pub = await exportPublicKey(myPublicKey);
      const data = { name: myName, privateKey: priv, publicKey: pub, friends };
      const jsonStr = JSON.stringify(data, null, 2);
      const blob = new Blob([jsonStr], { type: "application/json" });
      const url = URL.createObjectURL(blob);

      const a = document.createElement("a");
      a.href = url;
      a.download = "pgp-profile.json";
      document.body.appendChild(a);
      a.click();
      a.remove();
      URL.revokeObjectURL(url);

      toast("Profile downloaded as pgp-profile.json");
    } catch (e) {
      toast("Failed to save profile.");
      console.error(e);
    }
  }

  async function loadProfileUpload() {
    const input = document.createElement("input");
    input.type = "file";
    input.accept = "application/json";
    input.onchange = async () => {
      if (!input.files || input.files.length === 0) {
        toast("No file selected.");
        return;
      }
      const file = input.files[0];
      try {
        const text = await file.text();
        const data = JSON.parse(text);

        myName = data.name || "";
        friends = data.friends || {};
        document.getElementById("pgp-name").value = myName;
        myPrivateKey = await importPrivateKey(data.privateKey);
        myPublicKey = await importPublicKey(data.publicKey);
        document.getElementById("pgp-pub").value = data.publicKey;
        document.getElementById("pgp-gen").style.display = "none";
        document.getElementById("pgp-status").textContent = "Key loaded ‚úî";
        document.getElementById("pgp-status").style.color = "#43B581";
        renderFriends();
        updateFriendSelect();
        toast("Profile loaded from file.");
      } catch (e) {
        toast("Failed to load profile.");
        console.error(e);
      }
    };
    input.click();
  }

  // --- UI Rendering and Helpers ---

  function toast(msg) {
    let t = document.createElement("div");
    t.textContent = msg;
    t.style.position = "fixed";
    t.style.bottom = "80px";
    t.style.right = "20px";
    t.style.background = "#5865F2";
    t.style.color = "white";
    t.style.padding = "8px 16px";
    t.style.borderRadius = "5px";
    t.style.fontWeight = "600";
    t.style.zIndex = "99999";
    document.body.appendChild(t);
    setTimeout(() => t.remove(), 2500);
  }

  function renderFriends() {
    const container = document.getElementById("pgp-friends");
    container.innerHTML = "";
    Object.entries(friends).forEach(([id, f]) => {
      const row = document.createElement("div");
      row.className = "friend-row";
      row.innerHTML = `
        <div class="friend-name" title="${f.name}">${f.name}</div>
        <button class="btn-copy" title="Copy Public Key">üìã</button>
        <button class="btn-edit" title="Edit Friend">‚úèÔ∏è</button>
        <button class="btn-del" title="Delete Friend">üóëÔ∏è</button>
      `;
      // Copy pubkey
      row.querySelector(".btn-copy").onclick = () => {
        navigator.clipboard.writeText(f.key);
        toast(`Copied ${f.name}'s public key`);
      };
      // Delete friend
      row.querySelector(".btn-del").onclick = () => {
        if (
          confirm(`Delete friend "${f.name}"? This cannot be undone.`)
        ) {
          delete friends[id];
          renderFriends();
          updateFriendSelect();
        }
      };
      // Edit friend
      row.querySelector(".btn-edit").onclick = () => {
        const newName = prompt("Edit friend name:", f.name);
        if (!newName) return;
        const newKey = prompt("Edit friend's public key:", f.key);
        if (!newKey) return;
        delete friends[id];
        friends[newName.toLowerCase()] = { name: newName, key: newKey.trim() };
        renderFriends();
        updateFriendSelect();
      };
      container.appendChild(row);
    });
  }

  function updateFriendSelect() {
    const sel = document.getElementById("pgp-select");
    sel.innerHTML = '<option value="" disabled selected>Select friend</option>';
    Object.entries(friends).forEach(([id, f]) => {
      const opt = document.createElement("option");
      opt.value = id;
      opt.textContent = f.name;
      sel.appendChild(opt);
    });
  }

  function createUI() {
    if (document.getElementById(UI_ID)) return;
    const style = document.createElement("style");
    style.textContent = `
      #${UI_ID} {
        position: fixed;
        bottom: 1rem;
        right: 1rem;
        width: 320px;
        background: #36393F;
        color: #DCDDDE;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.8);
        font-family: "Whitney", "Helvetica Neue", Helvetica, Arial, sans-serif;
        font-size: 14px;
        z-index: 999999;
        display: flex;
        flex-direction: column;
        overflow: hidden;
      }
      #${UI_ID} header {
        background: #2F3136;
        padding: 10px 16px;
        font-weight: 600;
        font-size: 16px;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      #${UI_ID} header button {
        background: transparent;
        border: none;
        color: #B9BBBE;
        cursor: pointer;
        font-size: 18px;
      }
      #${UI_ID} .content {
        padding: 10px 16px;
        flex-grow: 1;
        overflow-y: auto;
      }
      #${UI_ID} label {
        display: block;
        margin-top: 8px;
        font-weight: 600;
      }
      #${UI_ID} input[type=text], #${UI_ID} textarea, #${UI_ID} select {
        width: 100%;
        margin-top: 4px;
        padding: 6px 8px;
        border-radius: 4px;
        border: none;
        font-family: monospace;
        font-size: 13px;
        background: #202225;
        color: #DCDDDE;
        resize: vertical;
      }
      #${UI_ID} textarea {
        height: 80px;
      }
      #${UI_ID} button.btn {
        margin-top: 10px;
        background: #5865F2;
        border: none;
        color: white;
        font-weight: 700;
        padding: 8px 12px;
        border-radius: 5px;
        cursor: pointer;
        width: 100%;
      }
      #${UI_ID} .friend-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: #2F3136;
        padding: 4px 8px;
        margin-top: 6px;
        border-radius: 5px;
        font-weight: 600;
      }
      #${UI_ID} .friend-name {
        flex-grow: 1;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        cursor: default;
      }
      #${UI_ID} .friend-row button {
        background: transparent;
        border: none;
        color: #B9BBBE;
        cursor: pointer;
        font-size: 16px;
        margin-left: 6px;
        user-select: none;
      }
      #${UI_ID} .status {
        margin-top: 6px;
        font-weight: 700;
        font-size: 13px;
      }
    `;
    document.head.appendChild(style);

    const container = document.createElement("div");
    container.id = UI_ID;
    container.innerHTML = `
      <header>
        <span>PGP Discord UI</span>
        <button id="pgp-close" title="Close">‚úï</button>
      </header>
      <div class="content">
        <label>Your Name
          <input id="pgp-name" type="text" placeholder="Your name" />
        </label>

        <div id="pgp-gen">
          <button class="btn" id="pgp-gen-btn">Generate Key Pair</button>
        </div>

        <label>Your Public Key
          <textarea id="pgp-pub" readonly placeholder="Your public key will appear here"></textarea>
        </label>

        <div class="status" id="pgp-status">No keys generated</div>

        <hr/>

        <label>Add Friend
          <input id="pgp-friend-name" type="text" placeholder="Friend name" />
          <textarea id="pgp-friend-key" placeholder="Friend's public key"></textarea>
          <button class="btn" id="pgp-friend-add">Add Friend</button>
        </label>

        <div id="pgp-friends"></div>

        <hr/>

        <label>Encrypt Message To
          <select id="pgp-select"></select>
          <textarea id="pgp-message" placeholder="Enter message to encrypt"></textarea>
          <button class="btn" id="pgp-encrypt-btn">Encrypt</button>
          <textarea id="pgp-encrypted" placeholder="Encrypted message will appear here" readonly></textarea>
        </label>

        <hr/>

        <label>Decrypt Message
          <textarea id="pgp-decrypt-input" placeholder="Paste encrypted message"></textarea>
          <button class="btn" id="pgp-decrypt-btn">Decrypt</button>
          <textarea id="pgp-decrypted" placeholder="Decrypted message will appear here" readonly></textarea>
        </label>

        <hr/>

        <button class="btn" id="pgp-save-btn">Save Profile (Download)</button>
        <button class="btn" id="pgp-load-btn">Load Profile (Upload)</button>
      </div>
    `;
    document.body.appendChild(container);

    // Event Listeners

    document.getElementById("pgp-close").onclick = () => {
      container.style.display = "none";
      document.getElementById(TOGGLE_ID).style.display = "inline-block";
    };

    document.getElementById("pgp-gen-btn").onclick = async () => {
      const nameInput = document.getElementById("pgp-name");
      if (!nameInput.value.trim()) {
        toast("Please enter your name first.");
        return;
      }
      myName = nameInput.value.trim();
      try {
        const keyPair = await generateKeyPair();
        myPrivateKey = keyPair.privateKey;
        myPublicKey = keyPair.publicKey;
        const pub = await exportPublicKey(myPublicKey);
        document.getElementById("pgp-pub").value = pub;
        document.getElementById("pgp-gen").style.display = "none";
        document.getElementById("pgp-status").textContent = "Key generated ‚úî";
        document.getElementById("pgp-status").style.color = "#43B581";
        toast("Key pair generated.");
      } catch (e) {
        toast("Failed to generate key pair.");
        console.error(e);
      }
    };

    document.getElementById("pgp-friend-add").onclick = () => {
      const fName = document.getElementById("pgp-friend-name").value.trim();
      const fKey = document.getElementById("pgp-friend-key").value.trim();
      if (!fName || !fKey) {
        toast("Friend name and key are required.");
        return;
      }
      const id = fName.toLowerCase();
      friends[id] = { name: fName, key: fKey };
      renderFriends();
      updateFriendSelect();
      document.getElementById("pgp-friend-name").value = "";
      document.getElementById("pgp-friend-key").value = "";
      toast(`Friend "${fName}" added.`);
    };

    document.getElementById("pgp-encrypt-btn").onclick = async () => {
      const sel = document.getElementById("pgp-select");
      const friendId = sel.value;
      if (!friendId) {
        toast("Select a friend to encrypt message.");
        return;
      }
      const friend = friends[friendId];
      if (!friend) {
        toast("Friend not found.");
        return;
      }
      if (!myName) {
        toast("Set your name first.");
        return;
      }
      const msg = document.getElementById("pgp-message").value.trim();
      if (!msg) {
        toast("Enter message to encrypt.");
        return;
      }
      try {
        const pubKey = await importPublicKey(friend.key);
        const cipher = await encryptMsg(pubKey, msg, myName);
        document.getElementById("pgp-encrypted").value = cipher;
        toast("Message encrypted.");
      } catch (e) {
        toast("Encryption failed.");
        console.error(e);
      }
    };

    document.getElementById("pgp-decrypt-btn").onclick = async () => {
      if (!myPrivateKey) {
        toast("No private key loaded.");
        return;
      }
      const cipher = document.getElementById("pgp-decrypt-input").value.trim();
      if (!cipher) {
        toast("Paste encrypted message.");
        return;
      }
      try {
        const plain = await decryptMsg(myPrivateKey, cipher);
        document.getElementById("pgp-decrypted").value = plain;
        toast("Message decrypted.");
      } catch (e) {
        toast("Decryption failed.");
        console.error(e);
      }
    };

    document.getElementById("pgp-save-btn").onclick = saveProfileDownload;
    document.getElementById("pgp-load-btn").onclick = loadProfileUpload;
  }

  // Toggle button to open UI
  function addToggleButton() {
    if (document.getElementById(TOGGLE_ID)) return;
    const btn = document.createElement("button");
    btn.id = TOGGLE_ID;
    btn.textContent = "PGP";
    btn.style.position = "fixed";
    btn.style.bottom = "1rem";
    btn.style.right = "1rem";
    btn.style.zIndex = "999999";
    btn.style.padding = "8px 12px";
    btn.style.borderRadius = "5px";
    btn.style.border = "none";
    btn.style.background = "#5865F2";
    btn.style.color = "white";
    btn.style.fontWeight = "600";
    btn.style.cursor = "pointer";
    btn.onclick = () => {
      btn.style.display = "none";
      createUI();
      document.getElementById(UI_ID).style.display = "flex";
    };
    document.body.appendChild(btn);
  }

  addToggleButton();
})();
